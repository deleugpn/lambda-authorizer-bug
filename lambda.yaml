AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda for Augmentt Backend
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    Auth:
      Authorizers:
        BasicAuthorizer:
          FunctionArn:
            Fn::GetAtt:
            - AuthorizerLambda
            - Arn
          ReauthorizeEvery: 0
      DefaultAuthorizer: BasicAuthorizer
Resources:
  AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/authorizer/index.handler
      Runtime: nodejs10.x
      CodeUri: s3://my-sample-lambda-authorizer/6fe139f9c28911ac6824befdedb01088
      MemorySize: 512
      Timeout: 28
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSLambdaExecute
  CustomersLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/customers/index.handler
      Runtime: nodejs10.x
      CodeUri: s3://my-sample-lambda-authorizer/6fe139f9c28911ac6824befdedb01088
      MemorySize: 512
      Timeout: 28
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Events:
        CustomerResource:
          Type: Api
          Properties:
            Path: /customers
            Method: ANY
        CustomerResourceWithProxy:
          Type: Api
          Properties:
            Path: /customers/{proxy+}
            Method: ANY
  NewLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/customers/index.handler
      Runtime: nodejs10.x
      CodeUri: s3://my-sample-lambda-authorizer/6fe139f9c28911ac6824befdedb01088
      MemorySize: 512
      Timeout: 28
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Events:
        NewResource:
          Type: Api
          Properties:
            Path: /blah
            Method: ANY
        NewResourceWithProxy:
          Type: Api
          Properties:
            Path: /blah/{proxy+}
            Method: ANY
  OrganizationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/customers/index.handler
      Runtime: nodejs10.x
      CodeUri: s3://my-sample-lambda-authorizer/6fe139f9c28911ac6824befdedb01088
      MemorySize: 512
      Timeout: 28
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Events:
        OrganizationsResource:
          Type: Api
          Properties:
            Path: /organizations
            Method: ANY
        OrganizationsResourceWithProxy:
          Type: Api
          Properties:
            Path: /organizations/{proxy+}
            Method: ANY
  GatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      EndpointConfiguration:
        Types:
        - REGIONAL
      RegionalCertificateArn:
        Fn::ImportValue: WildcardCertificate
      DomainName: test-lambda-auth.dta.customergauge.com
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
    - ServerlessRestApi
    Properties:
      DomainName:
        Ref: GatewayDomain
      RestApiId:
        Ref: ServerlessRestApi
      Stage: Prod
  ApiDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Fn::ImportValue: HostedZone
      RecordSets:
      - Name: test-lambda-auth.dta.customergauge.com
        Type: A
        AliasTarget:
          DNSName:
            Fn::GetAtt:
            - GatewayDomain
            - RegionalDomainName
          HostedZoneId:
            Fn::GetAtt:
            - GatewayDomain
            - RegionalHostedZoneId
